/*
 * Copyright 2021 Wooga GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

plugins {
    id 'groovy'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.8.2'
    id 'io.codearte.nexus-staging' version '0.30.0'
    id "io.github.gradle-nexus.publish-plugin" version "1.0.0"
    id 'nebula.release' version '15.3.1'
}

group 'com.wooga.gradle'
description = 'A library to provide APIs and utilities for our gradle projects.'

sourceSets {
    main {
        groovy {
            srcDirs = ['lib/src/main/groovy']
        }
    }
    test {
        groovy {
            srcDirs = ['lib/src/test/groovy']
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Use the latest Groovy version for building this library
    implementation 'org.codehaus.groovy:groovy-all:2.5.13'

    implementation gradleApi()

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:29.0-jre'

    // Use the awesome Spock testing and specification framework even with Java
    testImplementation 'org.spockframework:spock-core:1.3-groovy-2.5'
    testImplementation 'junit:junit:4.13'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'
}

// TODO: Remove in the future when nebule-release is removed
List<String> cliTasks = project.rootProject.gradle.startParameter.taskNames
if (cliTasks.contains("rc")) {
    cliTasks.remove("rc")
    cliTasks.add("candidate")
    project.rootProject.gradle.startParameter.setTaskNames(cliTasks)
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    withJavadocJar()
    withSourcesJar()
}

nexusStaging {
    username = project.hasProperty('ossrhUsername') ? project.property('ossrhUsername') : System.getenv('OSSRH_USERNAME')
    password = project.hasProperty('ossrhPassword') ? project.property('ossrhPassword') : System.getenv('OSSRH_PASSWORD')
    packageGroup = "com.wooga"
}

publishing {
    publications {
        main(MavenPublication) {
            artifactId = project.name

            from(components["java"])

            pom {
                name = 'Atlas Gradle Framework'
                description = 'A library for providing APIs for the development of Gradle plugins.'
                url = 'https://github.com/wooga/atlas-gradle'

                artifactId = project.name
                inceptionYear = "2021"

                scm {
                    connection = 'scm:git:https://github.com/wooga/atlas-gradle.git'
                    developerConnection = 'scm:git:https://github.com/wooga/atlas-gradle.git'
                    url = 'https://github.com/wooga/atlas-gradle.git'
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'manfred.endres'
                        name = 'Manfred Endres'
                        email = 'manfred.endres@wooga.net'
                    }
                }
            }
        }
    }
}


signing {
    def signingKeyId = project.hasProperty("signingKeyId") ? project.property('signingKeyId') : System.getenv('OSSRH_SIGNING_KEY_ID')
    def signingKey = project.hasProperty("signingKey") ? project.property('signingKey') : System.getenv('OSSRH_SIGNING_KEY')
    def signingPassword = project.hasProperty('signingPassphrase') ? project.property('signingPassphrase') : System.getenv("OSSRH_SIGNING_PASSPHRASE")
    useInMemoryPgpKeys(signingKeyId.toString(), signingKey.toString(), signingPassword.toString())
    sign publishing.publications.main
}
